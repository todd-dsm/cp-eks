#!/usr/bin/env bash
# PURPOSE:  Generate some variables for AWS/EKS. This file is called with one
#           argument while sourcing it in.
# -----------------------------------------------------------------------------
#    EXEC:  source scripts/setup/build.env <prod|stage> bucketName
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Check for arguments
if [[ "$#" -lt 1 ]]; then
    echo "Bro, where's my first argument: stage or prod?"
    return
fi

set -x
# -----------------------------------------------------------------------------
# Project Truths
export TF_VAR_myCo='smpl'
export TF_VAR_myProject='pipes'
export myComponent='network'
export TF_VAR_aws_acct_no='405322537961'

# The Build Environment
### --------------------------------------------------------------
export TF_VAR_envBuild="$1"
# These will set names for: EKS-cluser, managed-node-groups, etc
export TF_VAR_project="${TF_VAR_myProject}-${TF_VAR_envBuild}"
export TF_VAR_cluster_apps="${TF_VAR_project}"
### --------------------------------------------------------------
export TF_VAR_builder="$USER"
export dns_zone='ptest.us.'
export TF_VAR_hostedZone='Z34BVDAMUBBOZW'
export myDomain="${dns_zone%.*}"
export TF_VAR_myDomain="$myDomain"

# -----------------------------------------------------------------------------
# PROJECT; will be part of bucketName, naming rules:
export AWS_DEFAULT_REGION='us-west-2'
export TF_VAR_region="$AWS_DEFAULT_REGION"
export TF_VAR_stateBucket="tf-state-${TF_VAR_myProject}"
export TF_VAR_bucketKey='env'
export stateLockDynamoDB="${TF_VAR_stateBucket}-lock"

# -----------------------------------------------------------------------------
# Environmental Considerations
# Terraform Constants
case "$TF_VAR_envBuild" in
    dev)
        export TF_VAR_cluster_vault="vault-${TF_VAR_project}"
        export TF_VAR_dns_zone="${TF_VAR_envBuild}.${dns_zone}"
        export TF_VAR_twoOctets='10.2'
        export TF_VAR_host_cidr="${TF_VAR_twoOctets}.0.0/16"
        export TF_VAR_minDistSize='3'
        export TF_VAR_kubeNode_type='t3.large'                  # smallest
        #export TF_VAR_kubeNode_type='m5.large'                  # smallest
        ;;
    stage)
        export TF_VAR_cluster_vault="vault-${TF_VAR_project}"
        export TF_VAR_dns_zone="${TF_VAR_envBuild}.${dns_zone}"
        export TF_VAR_twoOctets='10.1'
        export TF_VAR_host_cidr="${TF_VAR_twoOctets}.0.0/16"
        export TF_VAR_minDistSize='3'
        export TF_VAR_kubeNode_type='t3.medium'
        ;;
    prod)
        export TF_VAR_cluster_vault="vault-${TF_VAR_project}"
        export TF_VAR_dns_zone="${dns_zone#*.}"
        export TF_VAR_twoOctets='10.0'
        export TF_VAR_host_cidr="${TF_VAR_twoOctets}.0.0/16"
        export TF_VAR_minDistSize='3'
        export TF_VAR_kubeNode_type='m4.xlarge'
        ;;
    *)  echo "$TF_VAR_envBuild is unsupported; exiting."
        ;;
esac


# -----------------------------------------------------------------------------
# Same for either ENV; depends on case
export planFile="/tmp/${TF_VAR_cluster_apps}.plan"

# where are we?
export TF_VAR_officeIPAddr="$(curl -s4 icanhazip.com)/32"

# Vault Stuff
export vaultStuff="/var/tmp/vault-stuff-${TF_VAR_region}-${TF_VAR_envBuild}.env"
export theJelly='/var/tmp/jelly.out'
#export certDir="$(pwd)/secrets/certs"
#export certConf='./secrets/config'
export kubeConfDir="${HOME}/.kube"
export kubeContext="${TF_VAR_myCo}-${TF_VAR_myProject}-${TF_VAR_envBuild}.ktx"
# Resultant Cluster Name using Cloud Posse EKS Terraform Module
export KUBECONFIG="$kubeConfDir/${kubeContext}"
export TF_VAR_myKubeConfig="$KUBECONFIG"


# -----------------------------------------------------------------------------
# RDS CONSTANTS
# -----------------------------------------------------------------------------
export TF_VAR_engine="postgres"
export TF_VAR_identifier="${TF_VAR_cluster_apps}-${TF_VAR_engine}"

# Change TF backend prefix with ENV change: <dev|stage|prod>
scripts/setup/create-tf-backend.sh

# Select the per-environment context
if [[ ! -d "$kubeConfDir" ]]; then
    mkdir -p "$kubeConfDir"
else
    ktx "$kubeContext" > /dev/null 2>&1
fi


set +x
